/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "greatdb-operator/pkg/apis/greatdb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GreatDBBackupRecordLister helps list GreatDBBackupRecords.
// All objects returned here must be treated as read-only.
type GreatDBBackupRecordLister interface {
	// List lists all GreatDBBackupRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GreatDBBackupRecord, err error)
	// GreatDBBackupRecords returns an object that can list and get GreatDBBackupRecords.
	GreatDBBackupRecords(namespace string) GreatDBBackupRecordNamespaceLister
	GreatDBBackupRecordListerExpansion
}

// greatDBBackupRecordLister implements the GreatDBBackupRecordLister interface.
type greatDBBackupRecordLister struct {
	indexer cache.Indexer
}

// NewGreatDBBackupRecordLister returns a new GreatDBBackupRecordLister.
func NewGreatDBBackupRecordLister(indexer cache.Indexer) GreatDBBackupRecordLister {
	return &greatDBBackupRecordLister{indexer: indexer}
}

// List lists all GreatDBBackupRecords in the indexer.
func (s *greatDBBackupRecordLister) List(selector labels.Selector) (ret []*v1alpha1.GreatDBBackupRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GreatDBBackupRecord))
	})
	return ret, err
}

// GreatDBBackupRecords returns an object that can list and get GreatDBBackupRecords.
func (s *greatDBBackupRecordLister) GreatDBBackupRecords(namespace string) GreatDBBackupRecordNamespaceLister {
	return greatDBBackupRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GreatDBBackupRecordNamespaceLister helps list and get GreatDBBackupRecords.
// All objects returned here must be treated as read-only.
type GreatDBBackupRecordNamespaceLister interface {
	// List lists all GreatDBBackupRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GreatDBBackupRecord, err error)
	// Get retrieves the GreatDBBackupRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GreatDBBackupRecord, error)
	GreatDBBackupRecordNamespaceListerExpansion
}

// greatDBBackupRecordNamespaceLister implements the GreatDBBackupRecordNamespaceLister
// interface.
type greatDBBackupRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GreatDBBackupRecords in the indexer for a given namespace.
func (s greatDBBackupRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GreatDBBackupRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GreatDBBackupRecord))
	})
	return ret, err
}

// Get retrieves the GreatDBBackupRecord from the indexer for a given namespace and name.
func (s greatDBBackupRecordNamespaceLister) Get(name string) (*v1alpha1.GreatDBBackupRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("greatdbbackuprecord"), name)
	}
	return obj.(*v1alpha1.GreatDBBackupRecord), nil
}
