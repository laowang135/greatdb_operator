/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "greatdb-operator/pkg/apis/greatdb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GreatDBBackupScheduleLister helps list GreatDBBackupSchedules.
// All objects returned here must be treated as read-only.
type GreatDBBackupScheduleLister interface {
	// List lists all GreatDBBackupSchedules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GreatDBBackupSchedule, err error)
	// GreatDBBackupSchedules returns an object that can list and get GreatDBBackupSchedules.
	GreatDBBackupSchedules(namespace string) GreatDBBackupScheduleNamespaceLister
	GreatDBBackupScheduleListerExpansion
}

// greatDBBackupScheduleLister implements the GreatDBBackupScheduleLister interface.
type greatDBBackupScheduleLister struct {
	indexer cache.Indexer
}

// NewGreatDBBackupScheduleLister returns a new GreatDBBackupScheduleLister.
func NewGreatDBBackupScheduleLister(indexer cache.Indexer) GreatDBBackupScheduleLister {
	return &greatDBBackupScheduleLister{indexer: indexer}
}

// List lists all GreatDBBackupSchedules in the indexer.
func (s *greatDBBackupScheduleLister) List(selector labels.Selector) (ret []*v1alpha1.GreatDBBackupSchedule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GreatDBBackupSchedule))
	})
	return ret, err
}

// GreatDBBackupSchedules returns an object that can list and get GreatDBBackupSchedules.
func (s *greatDBBackupScheduleLister) GreatDBBackupSchedules(namespace string) GreatDBBackupScheduleNamespaceLister {
	return greatDBBackupScheduleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GreatDBBackupScheduleNamespaceLister helps list and get GreatDBBackupSchedules.
// All objects returned here must be treated as read-only.
type GreatDBBackupScheduleNamespaceLister interface {
	// List lists all GreatDBBackupSchedules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GreatDBBackupSchedule, err error)
	// Get retrieves the GreatDBBackupSchedule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GreatDBBackupSchedule, error)
	GreatDBBackupScheduleNamespaceListerExpansion
}

// greatDBBackupScheduleNamespaceLister implements the GreatDBBackupScheduleNamespaceLister
// interface.
type greatDBBackupScheduleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GreatDBBackupSchedules in the indexer for a given namespace.
func (s greatDBBackupScheduleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GreatDBBackupSchedule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GreatDBBackupSchedule))
	})
	return ret, err
}

// Get retrieves the GreatDBBackupSchedule from the indexer for a given namespace and name.
func (s greatDBBackupScheduleNamespaceLister) Get(name string) (*v1alpha1.GreatDBBackupSchedule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("greatdbbackupschedule"), name)
	}
	return obj.(*v1alpha1.GreatDBBackupSchedule), nil
}
